Описание программного обеспечения системы "Термография сварного шва" от 2023.01.16
Структура файлов проекта:
Исполняемый код и сопутствующие файлы хранятся в директории src представленного проекта.
Директория src разбита на поддиректории в соответствии с объектами системы (работа с камерой .scr/camera
пользовательский интерфейс .scr/interface и т.д.).
Кратное описание модулей программы:

(В следующих модулях программы описаны классы, отвечающие за взаидойствие с объектами системы.)
camera.py - содержит класс Camera методы которого позволяют считывать и обрабатывать изображение с инфракрасной камеры (см. описание класса)
hmi_interface.py - содержит класс UiMainWindow который отвечает за конфигурацию графического интерфейса (см. описание класса)
ui_action.py - содержит класс UiAction методы которого описывают события, возникающие при взаимодействии с элементами интерфейса (см. описание класса)
fit_model.py - содержит класс InterfaceFitModel реализующий методы тренировки нейросети (см. описание класса)
neural_network.py - содержит класс NeuralNetwork методы которого позволяют работать с нейросетью (см. описание класса)
new_neural_model.py - содержит класс NewNeuralModel методы которого позволяют создавать объект необученной нейросети (см. описание класса)
parquet_worker.py - содержит класс ParquetWorker описывающий методы работы с БД parquet(см. описание класса)
profibus.py - содержит класс Profibus содержащий методы работы с промышленным протоколом profibus (см. описание класса)
transfocator.py - содержит класс SettingCamera методы которого позволяют управлять трансфокатором камеры (см. описание класса)

(В следующих модулях программы описаны базовые классы, на которых основана программа.)
base_process.py - содержит класс BaseProcess - переопределяющий класс процесса соответствующего модуля (см. описание класса)
base_task.py - содержит класс BaseTask - описывающий шаблон «задачи», использующийся для взаимодействия между модулями программы (см. описание класса)
base_thread.py - содержит класс BaseThread - переопределяет класс процесса соответствующего модуля (см. описание класса)
pipe_worker.py - содержит класс PipeWorker - описана работа с каналами связи (см. описание класса)
task_executor.py – содержит класс TaskExecutor – описана работа с очередь задач поступивших от других модулей (см. описание класса)

(В следующих модулях программы описаны процессы программы.)
camera_and_nn_process.py - содержит класс CameraAndNNProcess описывающий взаимодействие процесса камеры и нейросети с
другими модулями программы (см. описание класса)
parquet_process.py - содержит класс ParquetProcess описывающий взаимодействие процесса работы с БД и модулями ввода
вывода с другими модулями программы (см. описание класса)
ui_process.py - содержит класс UIProcess описывающий взаимодействие интерфейса пользователя с другими модулями программы
 (см. описание класса)

(В следующих модулях программы описаны настройки и точка входа в программу.)
config.py - содержит класс Config содержащий настройки программы (см. описание класса)
main.py - содержит класс MainProgram - точка входа в программу, описывает родительский процесс программы (см. описание класса)

Структура программы:
В виду того, что присутствуют как медленные задачи ввода/вывода и сетевое взаимодействие, а также задачи, требующие значительной
вычислительной мощности ПО работает в нескольких процессах:
Родительский процесс создаёт экземпляр класса MainProgram который в свою очередь инициализирует каналы связи и дочерние процессы.
Дочерние процессы: CameraAndNNProcess – реализует работу с камерой и нейронной сетью;
UIProcess – реализует работу с интерфейсом пользователя;
ParquetProcess – реализует работу с БД и периферией.
После инициализации родительский процесс отвечает за отображение сообщений логирования.
Для взаимодействия между модулями используется объект Pipe порождающий связанные объекты Connection работающие в дуплексном режиме.
За работу с объектом Connection отвечает класс PipeWorker, 3 экземпляра которого присутствуют в каждом процессе.
После запуска каждый модуль содержит 4 потока. Родительский поток запускает потоки работы с рабочим объектом, каналами связи
и поток исполнитель задач
после чего родительский поток переходит в ожидание завершения дочерних потоков.
При завершении работы модуля (завершение дочерних потоков) формируется сообщение о прекращение работы модуля.
Поток работы с рабочим объектом генерирует задачи для остальных модулей, поток работы с каналами связи отправляет задачи в другие
модули программы, если есть задачи для текущего объекта считывает их и выполняет.

Структура базового процесса:
Базовый процесс переопределяет метод запуска run() процесса, для более гибкого использования.
Содержит:
канал связи до главного процесса программы (необходимо для инкапсуляции создания сообщений логирования);
ссылку на шаблон задачи;
методы создания рабочих с Connection, создания объектов FIFO очередей, создания потоков, работы с Task.

Структура рабочего процесса на примере CameraAndNNProcess:

Рабочий процесс содержит экземпляр рабочего объекта self.camera
Каналы связи с остальными модулями программы self.pipe_to_main,self.pipe_to_ui и т.д.
Очереди на отправку задач в соответсвующие модули self.queue_to_main и т.д.
Очереди на выполнение задач с соответствующих модулей self.queue_from_main и т.д.
Рабочих с объектами Connection self.to_main_pipe_worker и т.д.
Исполнителей задач self.from_main_task_executor и т.д.
Поток работы с рабочим объектом self.thread_work_with_object
Поток работы с каналами связи self.thread_work_with_pipe
Поток работы с задачами self.thread_work_with_task
Переменные контроля работы:
self.b_work - разрешение работы модуля
self.b_pipe_free - сигнал каналы связи свободны
self.b_queue_free – очереди на выполнения свободны(все задачи выполнены)
self.b_create_task - разрешение создания задач другим модулям программы

После инициализации объекта процесса и применение метода .start() выполняется метод self.run(), который в свою
очередь вызывает метод self.action() в котором прописано создание и запуск потоков.
Каждый поток имеет свою целевую функцию self.work_with_pipe(), self.work_with_object ()
self.work_with_task ().

self.work_with_pipe() описывает цикл опроса и записи в канал связи. вызываю метод work() у соответсвующего PipeWorker`a.
Функция возвращает True если в течении 1с не было отправлено или принято задачь с соответсвующего канала.
self.work_with_task () описывает цикл опроса очередей на выполнение задач.
При завершении цикла проверяется общее состояние 3-х каналов связи.
При получении задачи от другого модуля, задача считывается и перенаправляется в очередь на исполнение, где проверяется
принадлежит ли задача к списку стандартных задач, если принадлежит,
то вызывается default_task_handler, иначе вызывается task_handler соответствующего канала. Так каждый процесс содержит
4 task_handler`a default_task_handler, from_parquet_task_handler и т.д.
self.work_with_object () описывает процесс создания задач другим модулям программы. В рассматриваемом процессе это
считать изображение с камеры, отправить изображение для записи в БД, отравить изображение на графический интерфейс
пользователя для отображения.

Процесс останова программы:
Временно реализован следующим образом: при закрытии главного окна графического интерфейса формируется запрос на
завершения программы self.create_task_close_program(self.queue_to_main, self.queue_to_parquet, self.queue_to_camera)
При выполнении которого устанавливаются в False переменные контроля, тем самым запрещается создание новых задач.
После получения сигнала об освобождении каналов связи, дочерние потоки процесса завершаются тем самым завершается
основной поток процесса и тем самым процесс останавливается, отправляя перед закрытием логирующее сообщение.
